<!DOCTYPE html>

<head>
    <meta charset="utf-8">
    <title>Force-Directed Graph(Network graph) with arrowheads and labels</title>
    <style>
        .links,
        .links.active-false {
            stroke: #999;
            fill: #999;
            stroke-opacity: 0.6;
            stroke-width: 1px;
            marker-end: url(#arrowhead-default)
        }

        .links.active-true {
            stroke-width: 5px;
            marker-end: url(#arrowhead-active)
        }

        #arrowhead-default path,
        #arrowhead-active path {
            stroke: #999;
            fill: #999;
        }

        #arrowhead-default path {
            transform: scale(.75);
        }

        #arrowhead-active path {
            transform: scale(.25);
        }

        text {
            pointer-events: none;
            fill: #000;
            font: 10px sans-serif;
        }

        svg {
            border: 1px solid #000;
        }

        @keyframes dash {
            to {
                stroke-dashoffset: 10;
            }
        }

        .data-flow {
            stroke-dasharray: 4, 5;
            animation: dash 10s linear forwards;
            animation-iteration-count: infinite;
        }

        .consume-data {
            stroke-dashoffset: 50;
            stroke: #8ace4aff
        }

        .provide-data {
            stroke-dashoffset: -50;
            stroke: #ff691aff;
        }
    </style>

    <script type="module">
        import * as d3 from "https://cdn.skypack.dev/d3@5";
        import forceBoundary from "https://cdn.skypack.dev/d3-force-boundary"

        const margin = {
            "top": 30,
            "right": 80,
            "bottom": 5,
            "left": 5
        }
        const width = 805
        const height = 765

        const colorScale = d3.scaleOrdinal(d3.schemeSet2);


        //create a simulation for an array of nodes, and compose the desired forces.
        const simulation = d3.forceSimulation()
            .force("link", d3.forceLink() // This force provides links between nodes
                .id(d => d.id) // This sets the node id accessor to the specified function. If not specified, will default to the index of a node.
                .distance(120)
            )
            .force("charge", d3.forceManyBody().strength(-700)) // This adds repulsion (if it's negative) between nodes.
            .force("center", d3.forceCenter(width / 2, height / 2)) // This force attracts nodes to the center of the svg area
            .force("boundary", forceBoundary(20, 20, width - 20, height - 20))
            ;


        const myChart = (dataset) => {
            const svg = d3.select("#chart")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            //appending little triangles, path object, as arrowhead
            //The <defs> element is used to store graphical objects that will be used at a later time
            //The <marker> element defines the graphic that is to be used for drawing arrowheads or polymarkers on a given <path>, <line>, <polyline> or <polygon> element.
            const createMarkerArrow = (defs, name, distanceToNode) => {
                return defs
                    .append('marker')
                    .attr("id", `arrowhead-${name}`)
                    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)
                    .attr('refX', distanceToNode.x) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.
                    .attr('refY', distanceToNode.y)
                    .attr('orient', 'auto')
                    .attr('markerWidth', 13)
                    .attr('markerHeight', 13)
                    .attr('xoverflow', 'visible')
                    .append('svg:path')
                    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
            }
            createMarkerArrow(svg.append('defs'), 'default', { x: 23, y: 0 })
            createMarkerArrow(svg.append('defs'), 'active', { x: 5, y: 0 })

            // Initialize the links
            const link = svg.selectAll(".links")
                .data(dataset.links)
                .enter()
                .append("line")
                .attr("class", "links")
                .attr("id", d => "line" + d.source + d.target);


            //The <title> element provides an accessible, short-text description of any SVG container element or graphics element.
            //Text in a <title> element is not rendered as part of the graphic, but browsers usually display it as a tooltip.
            link.append("title")
                .text(d => d.type);

            const edgepaths = svg.selectAll(".edgepath") //make path go along with the link provide position for link labels
                .data(dataset.links)
                .enter()
                .append('path')
                .attr('class', 'edgepath')
                .attr('fill-opacity', 0)
                .attr('stroke-opacity', 0)
                .attr('id', function (d, i) { return 'edgepath' + i })
                .style("pointer-events", "none");

            const edgelabels = svg.selectAll(".edgelabel")
                .data(dataset.links)
                .enter()
                .append('text')
                .style("pointer-events", "none")
                .attr('class', 'edgelabel')
                .attr('id', function (d, i) { return 'edgelabel' + i })
                .attr('font-size', 10)
                .attr('fill', '#aaa');

            edgelabels.append('textPath') //To render text along the shape of a <path>, enclose the text in a <textPath> element that has an href attribute with a reference to the <path> element.
                .attr('xlink:href', function (d, i) { return '#edgepath' + i })
                .style("text-anchor", "middle")
                .style("pointer-events", "none")
                .attr("startOffset", "50%")
                .text(d => d.type);

            // Initialize the nodes
            const node = svg.selectAll(".nodes")
                .data(dataset.nodes)
                .enter()
                .append("g")
                .attr("class", "nodes")
                .call(d3.drag() //sets the event listener for the specified typenames and returns the drag behavior.
                    .on("start", dragstarted) //start - after a new pointer becomes active (on mousedown or touchstart).
                    .on("drag", dragged)      //drag - after an active pointer moves (on mousemove or touchmove).
                );

            node.append("circle")
                .attr("r", d => 17)
                .style("stroke", "grey")
                .style("stroke-opacity", 0.3)
                .style("fill", d => colorScale(d.group))

            node.append("title")
                .text(d => d.id + ": " + d.label + " - " + d.group);

            node.append("text")
                .attr("dy", 4)
                .attr("dx", -15)
                .text(d => d.name);

            /*
            * v v v v v v v v v v v v v v v  CLICK NODE  v v v v v v v v v v v v v v v
            */
            const subgraphWidth = width * 2 / 8;
            const subgraphHeight = height * 1 / 5;

            const subgraph = svg.append("g")
                .attr("id", "subgraph");

            subgraph.append("text")
                .style("font-size", "16px")

            //set up dictionary of neighbors
            var neighborTarget = {};
            for (var i = 0; i < dataset.nodes.length; i++) {
                var id = dataset.nodes[i].id;
                neighborTarget[id] = dataset.links.filter(function (d) {
                    return d.source == id;
                }).map(function (d) {
                    return d.target;
                })
            }
            var neighborSource = {};
            for (var i = 0; i < dataset.nodes.length; i++) {
                var id = dataset.nodes[i].id;
                neighborSource[id] = dataset.links.filter(function (d) {
                    return d.target == id;
                }).map(function (d) {
                    return d.source;
                })
            }

            node.selectAll("circle").on("click", function (d) {
                var active = d.active ? false : true // toggle whether node is active

                subgraph.selectAll("text")
                    .text("Selected: " + d.label)
                    .attr("dy", 14)
                    .attr("dx", 14)

                //extract node's id and ids of its neighbors
                var id = d.id
                    , neighborS = neighborSource[id]
                    , neighborT = neighborTarget[id];
                console.log("neighbors is from ", neighborS, " to ", neighborT);


                //highlight the current node and its neighbors
                for (var i = 0; i < neighborS.length; i++) {
                    d3.selectAll("#line" + neighborS[i] + id).attr('class', `links active-${active} data-flow consume-data`)
                    d3.selectAll("#circle" + neighborS[i]).attr('class', `apex active-${active} data-flow consume-data`)
                }
                for (var i = 0; i < neighborT.length; i++) {
                    d3.selectAll("#line" + id + neighborT[i]).attr('class', `links active-${active} data-flow provide-data`)
                    d3.selectAll("#circle" + neighborT[i]).attr('class', `apex active-${active} data-flow provide-data`)
                }
                //update whether or not the node is active
                d.active = active;
            })
            // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ CLICK NODE ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^


            //Listen for tick events to render the nodes as they update in your Canvas or SVG.
            simulation
                .nodes(dataset.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(dataset.links);


            // This function is run at each iteration of the force algorithm, updating the nodes position (the nodes data array is directly manipulated).
            function ticked() {
                link.attr("x1", d => d.source.x)
                    .attr("y1", d => d.source.y)
                    .attr("x2", d => d.target.x)
                    .attr("y2", d => d.target.y);

                node.attr("transform", d => `translate(${d.x},${d.y})`);

                edgepaths.attr('d', d => 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y);
            }

            //When the drag gesture starts, the targeted node is fixed to the pointer
            //The simulation is temporarily “heated” during interaction by setting the target alpha to a non-zero value.
            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();//sets the current target alpha to the specified number in the range [0,1].
                d.fy = d.y; //fx - the node’s fixed x-position. Original is null.
                d.fx = d.x; //fy - the node’s fixed y-position. Original is null.
            }

            //When the drag gesture starts, the targeted node is fixed to the pointer
            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            //drawing the legend
            const legend_g = svg.selectAll(".legend")
                .data(colorScale.domain())
                .enter().append("g")
                .attr("transform", (d, i) => `translate(${width},${i * 20})`);

            legend_g.append("circle")
                .attr("cx", 0)
                .attr("cy", 0)
                .attr("r", 5)
                .attr("fill", colorScale);

            legend_g.append("text")
                .attr("x", 10)
                .attr("y", 5)
                .text(d => d);

            //drawing the second legend
            const legend_g2 = svg.append("g")
                .attr("transform", `translate(${width}, 120)`);
            return svg
        }

        const dataset = {{{ json_data }}};
        myChart(dataset);
    </script>

</head>

<body>
    <div id="chart" style='max-width: 900px; overflow-x: auto; padding: 0px; margin: 0px;'></div>
</body>